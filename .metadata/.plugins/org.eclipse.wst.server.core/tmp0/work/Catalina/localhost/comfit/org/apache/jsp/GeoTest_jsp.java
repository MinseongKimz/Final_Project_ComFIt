/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2022-06-19 13:47:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class GeoTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1655351634840L));
    _jspx_dependants.put("jar:file:/C:/Final_Project_ComFIt/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/comfit/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String cp = request.getContextPath();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/main.css\" type=\"text/css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery.min.js\"></script>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=86ec7935feee50bc358cd41148ffd4e2&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("   function searchAddr()\r\n");
      out.write("   {\r\n");
      out.write("      new daum.Postcode({\r\n");
      out.write("         \r\n");
      out.write("           oncomplete: function(data) {\r\n");
      out.write("               // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.\r\n");
      out.write("               // 예제를 참고하여 다양한 활용법을 확인해 보세요.\r\n");
      out.write("               //alert(data); //[Object]\r\n");
      out.write("               \r\n");
      out.write("               var fullRoadAddr = data.roadAddress;   // 도로명 주소 변수\r\n");
      out.write("               var extraRoadAddr = '';\r\n");
      out.write("               \r\n");
      out.write("             // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("             // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("               if(data.bname !== '' && /[동|로|가]$/g.test(data.bname))\r\n");
      out.write("               {\r\n");
      out.write("                     extraRoadAddr += data.bname;\r\n");
      out.write("               }\r\n");
      out.write("                 // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("               if(data.buildingName !== '' && data.apartment == 'Y')\r\n");
      out.write("               {\r\n");
      out.write("                     extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("               }\r\n");
      out.write("               // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("               if(extraRoadAddr !== '')\r\n");
      out.write("               {\r\n");
      out.write("                   extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("               }\r\n");
      out.write("               // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.\r\n");
      out.write("               if(fullRoadAddr !== '')\r\n");
      out.write("               {\r\n");
      out.write("                   fullRoadAddr += extraRoadAddr;\r\n");
      out.write("               }\r\n");
      out.write("               \r\n");
      out.write("               document.getElementById('address').value = fullRoadAddr;\r\n");
      out.write("               \r\n");
      out.write("\t           \tif($(\"#address\").val() != \"\") // 여기서부턴 검색으로 좌표값을 알아내기 위한 코드\r\n");
      out.write("\t    \t\t{\r\n");
      out.write("\t           \t\tvar add = $(\"#address\").val();\r\n");
      out.write("\t    \t\t\t//alert(add)\r\n");
      out.write("\t    \t\t\t\r\n");
      out.write("\t    \t\t\tvar geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\t    \t\t\t\r\n");
      out.write("\t           \t    geocoder.addressSearch(add, function(result, status)\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t           \t\t\tif (status === kakao.maps.services.Status.OK)\r\n");
      out.write("\t           \t\t\t{\r\n");
      out.write("\t           \t\t\t\t//alert(result[0].y + \"/\" + result[0].x);  // 위도 / 경도\r\n");
      out.write("\t           \t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#pd_hope_place\", opener.document).val($(\"#address\").val());\r\n");
      out.write("\t\t     \t\t\t\t$(\"#address\", opener.document).val(result[0].y+\"/\"+result[0].x);\r\n");
      out.write("\t\t     \t\t\t\twindow.close();\r\n");
      out.write("     \t\t\t\t\t\t\r\n");
      out.write("\t           \t\t\t}\t\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t    \t\t\t\r\n");
      out.write("\t    \t\t\t\r\n");
      out.write("\t    \t\t}\r\n");
      out.write("               \r\n");
      out.write("           }\r\n");
      out.write("       }).open({\r\n");
      out.write("          /* popupKey : 'popup1'   // 팝업창 key 설정 */\r\n");
      out.write("       });   \r\n");
      out.write("   }\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"mb-3\" style=\"margin-left: 3%; margin-top: 2%\">\r\n");
      out.write("\t<form action=\"georesult.action\" method=\"get\">\r\n");
      out.write("\t\t<label for=\"address\">주소검색</label><br />\r\n");
      out.write("\t\t<input type=\"text\" class=\"form-control\" name=\"addr\" id=\"address\" placeholder=\"클릭해주세요\" required=\"required\" readonly=\"readonly\" style=\"width: 400px;\" onclick=\"searchAddr()\">\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-secondary\" id=\"geoBtn\" style=\"margin-left: 60%;\">주소선택완료</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
