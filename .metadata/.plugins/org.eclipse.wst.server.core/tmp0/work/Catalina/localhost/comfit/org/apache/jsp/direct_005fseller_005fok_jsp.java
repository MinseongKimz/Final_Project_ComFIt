/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2022-06-19 13:49:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.mail.iap.Response;
import org.springframework.web.bind.annotation.ResponseBody;
import com.test.mybatis.deliveryInsertDTO;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;

public final class direct_005fseller_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1655351634840L));
    _jspx_dependants.put("jar:file:/C:/Final_Project_ComFIt/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/comfit/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.test.mybatis.deliveryInsertDTO");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("org.springframework.web.bind.annotation.ResponseBody");
    _jspx_imports_classes.add("com.sun.mail.iap.Response");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String cp = request.getContextPath();

      out.write('\r');
      out.write('\n');

	/* Write_ok.jsp */
	
	//System.out.println("jsp");
	
	// ① 주요 속성값들 준비 (multipart request 를 위한 속성값 준비)
	String root = "/";
	root = pageContext.getServletContext().getRealPath(root);
	
	String savePath = "C:\\Final_Project_ComFIt\\comfit\\WebContent\\images";
	//System.out.println(savePath);
	
	// 			                           "\\"
	
	
	
	//out.println(savePath + "<br>");
	String encType = "UTF-8";
	int maxFileSize = 5*1024*1024;
	
	
	// ② 경로상 디렉터리가 존재하지 않으면.. 만든다.
	File dir = new File(savePath);
	if (!dir.exists())
		dir.mkdirs();
	
	// ③ MultipartRequest 구성
	MultipartRequest req = null;
	
	try
	{
		// request, 파일저장경로, 파일최대크기, 인코딩방식, 중복파일명처리정책
		req = new MultipartRequest(request, savePath, maxFileSize
				                 , encType, new DefaultFileRenamePolicy());
		
		// ④ 구성된 MultipartRequest 로 부터 필요한 값 얻어내기
		String pd_title = req.getParameter("pd_title"); //
		String pd_name = req.getParameter("pd_name"); //
		String pd_as_remain = req.getParameter("pd_as_remain"); //
		String pd_hope_sdate = req.getParameter("pd_hope_sdate");
		String pd_hope_edate = req.getParameter("pd_hope_edate");
		String pd_hope_stime = req.getParameter("pd_hope_stime");
		String pd_hope_etime = req.getParameter("pd_hope_etime");
		String pd_hope_place = req.getParameter("pd_hope_place");
		String pd_maker_id = req.getParameter("pd_maker_id"); //
		String pd_hopeprice = req.getParameter("pd_hopeprice"); //
		String pd_as_id = req.getParameter("pd_as_id"); //
		String cf_price = req.getParameter("cf_price"); //
		String comments = req.getParameter("comments"); //
		String pd_hope_mgrs = req.getParameter("pd_hope_mgrs"); 
		String pd_photo = req.getFilesystemName("uploadFile");

		
		
		request.setAttribute("pd_title", pd_title);
		request.setAttribute("pd_name", pd_name);
		request.setAttribute("pd_as_remain", pd_as_remain);
		request.setAttribute("pd_hope_sdate", pd_hope_sdate);
		request.setAttribute("pd_hope_edate", pd_hope_edate);
		request.setAttribute("pd_hope_stime", pd_hope_stime);
		request.setAttribute("pd_hope_etime", pd_hope_etime);
		request.setAttribute("pd_hope_place", pd_hope_place);
		request.setAttribute("pd_maker_id", pd_maker_id);
		request.setAttribute("pd_as_id", pd_as_id);
		request.setAttribute("cf_price", cf_price);
		request.setAttribute("comments", comments);
		request.setAttribute("pd_hope_mgrs", pd_hope_mgrs);
		request.setAttribute("pd_photo", pd_photo);
		request.setAttribute("pd_hopeprice", pd_hopeprice);
		
		
		//response.sendRedirect("deliveryinsert.action");
		
		RequestDispatcher dis = request.getRequestDispatcher("directinsert.action");
		dis.forward(request, response);
		
	}
	catch(Exception e)
	{
		System.out.println(e.toString());
	}
	
		

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
