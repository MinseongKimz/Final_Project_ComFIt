/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2022-06-13 14:48:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class user_005faddress_005ffind_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1654491837648L));
    _jspx_dependants.put("jar:file:/C:/Final_Project_ComFIt/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/comfit/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>주소검색</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("<style>\r\n");
      out.write("    .map_wrap {position:relative;width:100%;height:350px;}\r\n");
      out.write("    .title {font-weight:bold;display:block; font-size: 10px;}\r\n");
      out.write("    .hAddr {position:absolute;left:10px;top:10px; font-size: 10px; border-radius: 2px;background:#fff;background:rgba(255,255,255,0.8);z-index:1;padding:5px;}\r\n");
      out.write("    #centerAddr {display:block;margin-top:2px;font-weight: normal;}\r\n");
      out.write("    .bAddr {padding:5px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap; font-size: 3px;}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t");
      if (_jspx_meth_c_005fimport_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<div style=\"margin-top: 8%;\">\r\n");
      out.write("\t   <h1 style=\"text-align: center;\">주소 검색</h1>\r\n");
      out.write("\t   <hr />\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"map_wrap\" style=\"left:30%; right: 30%;\">\r\n");
      out.write("\t    <div id=\"map\" style=\"width:500px;height:500px; overflow:hidden;\"></div>\r\n");
      out.write("\t\t    <div class=\"hAddr\" style=\"\">\r\n");
      out.write("\t\t        <span class=\"title\">지도중심기준 행정동 주소정보</span>\r\n");
      out.write("\t\t        <span id=\"centerAddr\"></span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t<div style=\"margin-top: 20px;\">\r\n");
      out.write("\t\t\t<form action=\"maptest01.jsp\" method=\"get\" style=\"display: inline-block; \">\r\n");
      out.write("\t\t      <input type=\"text\"  id=\"addr\" readonly=\"readonly\" style=\"width: 280px; height: 25px; \" />\r\n");
      out.write("\t\t      <br /><input type=\"text\"  id=\"subAddr\"  style=\"width: 350px; height: 25px; margin-top: 5px;\" required=\"required\" placeholder=\"상세 주소를 입력하세요\"> \r\n");
      out.write("\t\t      <br>\r\n");
      out.write("\t\t      <button type=\"submit\" class=\"btn btn-primary\" style=\"width: 70px; height: 35px; margin-top: 8px;\">확인</button>\r\n");
      out.write("\t\t   </form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t    \r\n");
      out.write("\t    <br />\r\n");
      out.write("\t<!--     \r\n");
      out.write("\t<div class=\"result_Address\" style=\"margin-top: 2%; margin: auto; margin-left: 31%;\">\r\n");
      out.write("\t   <form action=\"maptest01.jsp\" method=\"get\" style=\"/* position: absolute; */ top: 80%; display: inline-block; \">\r\n");
      out.write("\t      <input type=\"text\"  id=\"addr\" readonly=\"readonly\" style=\"width: 250px; height: 25px; display: inline-block; \" />\r\n");
      out.write("\t      <br /><input type=\"text\"  id=\"subAddr\"  style=\"width: 350px; height: 25px; margin-top: 5px;\" required=\"required\" placeholder=\"상세 주소를 입력하세요\"> \r\n");
      out.write("\t      <br>\r\n");
      out.write("\t      <button type=\"submit\" class=\"btn btn-primary\" style=\"width: 70px; height: 35px; margin-top: 8px;\">확인</button>\r\n");
      out.write("\t      \r\n");
      out.write("\t   </form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t -->\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=86ec7935feee50bc358cd41148ffd4e2&libraries=services\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t   var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t       mapOption = {\r\n");
      out.write("\t           center: new kakao.maps.LatLng(37.525916,+126.717543), // 지도의 중심좌표 (게시물마다 중심 좌표가 될 값)\r\n");
      out.write("\t           level: 6 // 지도의 확대 레벨\r\n");
      out.write("\t       };  \r\n");
      out.write("\t   \r\n");
      out.write("\t   // 지도를 생성합니다    \r\n");
      out.write("\t   var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\t   \r\n");
      out.write("\t   // 주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("\t   var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\t   \r\n");
      out.write("\t   var marker = new kakao.maps.Marker(), // 클릭한 위치를 표시할 마커입니다\r\n");
      out.write("\t       infowindow = new kakao.maps.InfoWindow({zindex:1}); // 클릭한 위치에 대한 주소를 표시할 인포윈도우입니다\r\n");
      out.write("\t   \r\n");
      out.write("\t   // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다\r\n");
      out.write("\t   searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n");
      out.write("\t   \r\n");
      out.write("\t   // 지도를 클릭했을 때 클릭 위치 좌표에 대한 주소정보를 표시하도록 이벤트를 등록합니다\r\n");
      out.write("\t   kakao.maps.event.addListener(map, 'click', function(mouseEvent) {\r\n");
      out.write("\t       searchDetailAddrFromCoords(mouseEvent.latLng, function(result, status) {\r\n");
      out.write("\t           if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t               var detailAddr = !!result[0].road_address ? '<div style=\"font-size: small;\">도로명주소 : ' + result[0].road_address.address_name + '</div>' : '';\r\n");
      out.write("\t               detailAddr += '<div style=\"font-size: small;\">지번 주소 : ' + result[0].address.address_name + '</div>';\r\n");
      out.write("\t               \r\n");
      out.write("\t               var content = '<div class=\"bAddr\">' +\r\n");
      out.write("\t                               '<span class=\"title\">법정동 주소정보</span>' + \r\n");
      out.write("\t                               detailAddr + \r\n");
      out.write("\t                           '</div>';\r\n");
      out.write("\t   \r\n");
      out.write("\t               // 마커를 클릭한 위치에 표시합니다 \r\n");
      out.write("\t               marker.setPosition(mouseEvent.latLng);\r\n");
      out.write("\t               marker.setMap(map);\r\n");
      out.write("\t   \r\n");
      out.write("\t               // 인포윈도우에 클릭한 위치에 대한 법정동 상세 주소정보를 표시합니다\r\n");
      out.write("\t               infowindow.setContent(content);\r\n");
      out.write("\t               infowindow.open(map, marker);\r\n");
      out.write("\t               \r\n");
      out.write("\t               document.getElementById(\"addr\").value = result[0].address.address_name;\r\n");
      out.write("\t               document.getElementById(\"subAddr\").focus();\r\n");
      out.write("\t               \r\n");
      out.write("\t           }   \r\n");
      out.write("\t       });\r\n");
      out.write("\t   });\r\n");
      out.write("\t   \r\n");
      out.write("\t   // 중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다\r\n");
      out.write("\t   kakao.maps.event.addListener(map, 'idle', function() {\r\n");
      out.write("\t       searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n");
      out.write("\t   });\r\n");
      out.write("\t   \r\n");
      out.write("\t   function searchAddrFromCoords(coords, callback) {\r\n");
      out.write("\t       // 좌표로 행정동 주소 정보를 요청합니다\r\n");
      out.write("\t       geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);         \r\n");
      out.write("\t   }\r\n");
      out.write("\t   \r\n");
      out.write("\t   function searchDetailAddrFromCoords(coords, callback) {\r\n");
      out.write("\t       // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n");
      out.write("\t       geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n");
      out.write("\t   }\r\n");
      out.write("\t   \r\n");
      out.write("\t   // 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다\r\n");
      out.write("\t   function displayCenterInfo(result, status) {\r\n");
      out.write("\t       if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t           var infoDiv = document.getElementById('centerAddr');\r\n");
      out.write("\t   \r\n");
      out.write("\t           for(var i = 0; i < result.length; i++) {\r\n");
      out.write("\t               // 행정동의 region_type 값은 'H' 이므로\r\n");
      out.write("\t               if (result[i].region_type === 'H') {\r\n");
      out.write("\t                   infoDiv.innerHTML = result[i].address_name;\r\n");
      out.write("\t                   break;\r\n");
      out.write("\t               }\r\n");
      out.write("\t           }\r\n");
      out.write("\t       }    \r\n");
      out.write("\t   }\r\n");
      out.write("\t   \r\n");
      out.write("\t   function setDraggable(draggable) {\r\n");
      out.write("\t       // 마우스 드래그로 지도 이동 가능여부를 설정합니다\r\n");
      out.write("\t       map.setDraggable(draggable);    \r\n");
      out.write("\t   } \r\n");
      out.write("\t   \r\n");
      out.write("\t   map.setMaxLevel(6);\r\n");
      out.write("\t   setDraggable(false);\r\n");
      out.write("\t      \r\n");
      out.write("\t   var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\t   map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\t\r\n");
      out.write("\t   // 지도가 확대 또는 축소되면 마지막 파라미터로 넘어온 함수를 호출하도록 이벤트를 등록합니다\r\n");
      out.write("\t   kakao.maps.event.addListener(map, 'zoom_changed', function() {        \r\n");
      out.write("\t       \r\n");
      out.write("\t      if (map.getLevel()=='6')                                // 지도의 맥스 레벨이 6레벨이 되면 \r\n");
      out.write("\t         map.setCenter(new kakao.maps.LatLng(37.525916,+126.717543)); // 지도의 중심좌표 (게시물마다 중심 좌표가 될 값) 로 다시 이동\r\n");
      out.write("\t      \r\n");
      out.write("\t      if (map.getLevel()<='2') // 지도 레벨이 4이하 (구체적 건물표현정도)\r\n");
      out.write("\t         setDraggable(true);   // 로 떨어지면 드래그로 지도 위치를 바꿀수 있음\r\n");
      out.write("\t      else \r\n");
      out.write("\t         setDraggable(false);\r\n");
      out.write("\t   });\r\n");
      out.write("\t   \r\n");
      out.write("\t</script>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fimport_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:import
    org.apache.taglibs.standard.tag.rt.core.ImportTag _jspx_th_c_005fimport_005f0 = (org.apache.taglibs.standard.tag.rt.core.ImportTag) _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.ImportTag.class);
    boolean _jspx_th_c_005fimport_005f0_reused = false;
    try {
      _jspx_th_c_005fimport_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fimport_005f0.setParent(null);
      // /user_address_find.jsp(23,1) name = url type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fimport_005f0.setUrl("/WEB-INF/view/user/main/comfit_header_user.jsp");
      int[] _jspx_push_body_count_c_005fimport_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fimport_005f0 = _jspx_th_c_005fimport_005f0.doStartTag();
        if (_jspx_th_c_005fimport_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fimport_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fimport_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fimport_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fimport_0026_005furl_005fnobody.reuse(_jspx_th_c_005fimport_005f0);
      _jspx_th_c_005fimport_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fimport_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fimport_005f0_reused);
    }
    return false;
  }
}
