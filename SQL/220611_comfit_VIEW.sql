-- 뷰VIEW 작업 실시 2022-06-11, 김상기

SELECT USER
FROM DUAL;
--==>> COMFIT

-- ●● 관리자용 뷰 ●● --
-- * 회원 관리
-- 1. 일반회원관리 [ AD_USER_LIST_REALVIEW ]
-- 출력 데이터 : 이메일, 이름, 닉네임, 전화, 레벨, 가입일, 상태, 누적차단횟수()


INSERT INTO DELIVERY_PD_REPORT(REP_ID, REP_CONTENTS, U_ID, PD_REP_CID, DELI_PD_ID)
VALUES('delirep_1', '유해한 내용 업로드', 'test1', 3, 'deli_1');

INSERT INTO DELI_PD_REP_HANDLE(REP_ID, AD_ID, HAN_CATE_ID)
VALUES('delirep_1', 'cf_admin', 2);

INSERT INTO DELI_PD_BANNED(BAN_ID, BAN_REA_DETAIL, REP_ID, BAN_CATE_ID)
VALUES('ban_1', '유해한 내용을 업로드한 것을 확인함', 'delirep_1', 1);

COMMIT;


-- 택배 상품 누적 차단 카운트를 위한 view
CREATE OR REPLACE VIEW DELIVERY_PD_BANNED_VIEW
AS
SELECT DPR.REP_ID, DPR.REP_CONTENTS, DPR.REP_DATE, DPR.PD_REP_CID, DPR.DELI_PD_ID
     , DPH.REP_HAN_DATE, DPH.HAN_CATE_ID
     , DPB.BAN_ID, DPB.BAN_REA_DETAIL, DPB.BAN_DATE, DPB.BAN_CATE_ID
     , DP.PD_TITLE, DP.PD_REGIT_DATE,DPR.U_ID AS REPORTER, DP.U_ID AS REPORTED , DPH.AD_ID
FROM DELIVERY_PD_REPORT DPR 
    JOIN DELI_PD_REP_HANDLE DPH 
    ON DPR.REP_ID = DPH.REP_ID 
    JOIN DELI_PD_BANNED DPB
    ON DPH.REP_ID = DPB.REP_ID
    JOIN DELIVERY_PRODUCT DP
    ON DP.DELI_PD_ID = DPR.DELI_PD_ID;


-- 택배 상품 누적 차단 횟수 확인 쿼리문
SELECT COUNT(*) AS COUNT
FROM DELIVERY_PD_BANNED_VIEW
WHERE REPORTED = 'test2';


-- 직거래 상품 누적 차단 카운트를 위한 view
CREATE OR REPLACE VIEW DIRECT_PD_BANNED_VIEW
AS
SELECT DPR.REP_ID, DPR.REP_CONTENTS, DPR.REP_DATE, DPR.PD_REP_CID, DPR.DIRE_PD_ID
     , DPH.REP_HAN_DATE, DPH.HAN_CATE_ID
     , DPB.BAN_ID, DPB.BAN_REA_DETAIL, DPB.BAN_DATE, DPB.BAN_CATE_ID
     , DP.PD_TITLE, DP.PD_REGIT_DATE,DPR.U_ID AS REPORTER, DP.U_ID AS REPORTED , DPH.AD_ID
FROM DIRECT_PD_REPORT DPR 
    JOIN DIRE_PD_REP_HANDLE DPH 
    ON DPR.REP_ID = DPH.REP_ID 
    JOIN DIRE_PD_BANNED DPB
    ON DPH.REP_ID = DPB.REP_ID
    JOIN DIRECT_PRODUCT DP
    ON DP.DIRE_PD_ID = DPR.DIRE_PD_ID;


-- 직거래 상품 누적 차단 횟수 확인 쿼리문
SELECT COUNT(*) AS COUNT
FROM DIRECT_PD_BANNED_VIEW
WHERE REPORTED = 'test2';



-- 택배 거래 누적 차단 카운트를 위한 view
CREATE OR REPLACE VIEW DELIVERY_TRANS_BANNED_VIEW
AS
SELECT DTB.BAN_ID, DTB.BAN_REA_DETAIL, DTB.BAN_DATE, DTB.REP_ID, DTB.BAN_CATE_ID
     , DTH.REP_HAN_DATE, DTH.HAN_CATE_ID
     , DTR.REP_CONTENTS, DTR.REP_DATE, DTR.TRANS_REP_CID, DTR.BS_ID, DTR.REPORTER_ID
     , BS.BS_DATE, BS.BID_CODE
     , BL.BID_DATE, DP.PD_TITLE, DP.PD_REGIT_DATE
     , CASE WHEN DTR.REPORTER_ID = 1 
        THEN BL.U_ID
        ELSE DP.U_ID
        END AS REPORTER
     , CASE WHEN DTR.REPORTER_ID = 1
        THEN DP.U_ID
        ELSE BL.U_ID
        END AS REPORTED
     , DTH.AD_ID 
FROM DELI_TA_BANNED DTB
    JOIN DELI_TA_REP_HANDLE DTH
    ON DTB.REP_ID = DTH.REP_ID
    JOIN DELIVERY_TA_REPORT DTR
    ON DTH.REP_ID = DTR.REP_ID
    JOIN BID_SUCCESS BS
    ON DTR.BS_ID = BS.BS_ID
    JOIN BID_LIST BL
    ON BS.BID_CODE = BL.BID_CODE
    JOIN DELIVERY_PRODUCT DP
    ON BL.DELI_PD_ID = DP.DELI_PD_ID;
--==>> View DELIVERY_TRANS_BANNED_VIEW이(가) 생성되었습니다.



-- 택배 거래 누적 차단 횟수 확인 쿼리문
SELECT COUNT(*) AS COUNT
FROM DILIVERY_TRANS_BANNED_VIEW
WHERE REPORTED = 'test2';



-- 직거래 거래 누적 차단 카운트를 위한 view
CREATE OR REPLACE VIEW DIRECT_TRANS_BANNED_VIEW
AS
SELECT DTB.BAN_ID, DTB.BAN_REA_DETAIL, DTB.BAN_DATE, DTB.REP_ID, DTB.BAN_CATE_ID
     , DTH.REP_HAN_DATE, DTH.HAN_CATE_ID
     , DTR.REP_CONTENTS, DTR.REP_DATE, DTR.TRANS_REP_CID, DTR.SELECTED_ID, DTR.REPORTER_ID
     , S.SELECTED_DATE, S.SUGGEST_CODE
     , SL.SUGGEST_DATE, DP.PD_TITLE, DP.PD_REGIT_DATE
     , CASE WHEN DTR.REPORTER_ID = 1 
        THEN SL.U_ID
        ELSE DP.U_ID
        END AS REPORTER
     , CASE WHEN DTR.REPORTER_ID = 1
        THEN DP.U_ID
        ELSE SL.U_ID
        END AS REPORTED
     , DTH.AD_ID 
FROM DIRE_TA_BANNED DTB
    JOIN DIRE_TA_REP_HANDLE DTH
    ON DTB.REP_ID = DTH.REP_ID
    JOIN DIRECT_TA_REPORT DTR
    ON DTH.REP_ID = DTR.REP_ID
    JOIN SELECTED S
    ON DTR.SELECTED_ID = S.SELECTED_ID
    JOIN SUGGEST_LIST SL
    ON S.SUGGEST_CODE = SL.SUGGEST_CODE
    JOIN DIRECT_PRODUCT DP
    ON SL.DIRE_PD_ID = DP.DIRE_PD_ID;
--==>> View DIRECT_TRANS_BANNED_VIEW이(가) 생성되었습니다.

-- 직거래 누적 차단 횟수 확인 쿼리문
SELECT COUNT(*) AS COUNT
FROM DIRECT_TRANS_BANNED_VIEW
WHERE REPORTED = 'test2';


-- 누적차단횟수 조회 쿼리문
SELECT COUNT(*) AS COUNT
FROM
(
SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
FROM DIRECT_TRANS_BANNED_VIEW
UNION
SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
FROM DELIVERY_TRANS_BANNED_VIEW
UNION
SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
FROM DIRECT_PD_BANNED_VIEW
UNION
SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
FROM DELIVERY_PD_BANNED_VIEW
)
WHERE REPORTED = 'test2';

SELECT U_EMAIL, U_NAME, U_NICKNAME, U_TEL, U_JOINDATE
FROM USER_INFORMATION;

SELECT *
FROM COMFIT_USER;


-- ▣ AD_USER_LIST_REALVIEW 
CREATE OR REPLACE VIEW AD_USER_LIST_REALVIEW
AS
SELECT U_EMAIL, U_NAME, U_NICKNAME, U_TEL, U_JOINDATE, 
(
    SELECT COUNT(*) AS COUNT
    FROM
    (
    SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
    FROM DIRECT_TRANS_BANNED_VIEW
    UNION
    SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
    FROM DELIVERY_TRANS_BANNED_VIEW
    UNION
    SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
    FROM DIRECT_PD_BANNED_VIEW
    UNION
    SELECT BAN_ID, BAN_DATE, REPORTED, REPORTER
    FROM DELIVERY_PD_BANNED_VIEW
    )
    WHERE U_ID = REPORTED
) AS BANCOUNT
FROM USER_INFORMATION;

-- 일반회원 조회 구문
SELECT U_EMAIL, U_NAME, U_NICKNAME, U_TEL, U_JOINDATE, BANCOUNT
FROM AD_USER_LIST_REALVIEW;
/*
issac1162@test.com	오이삭	삭이오	010-2988-1162	2022-06-10 17:18;42	0
kkk@naver.com	김민성	민성킴의활약	010-2222-3333	2022-06-11 22:47;57	1
*/









--------------------------------------------------------------------------------


-- * 거래 관리
-- 1. 상품 관리
-- 택배 상품 뷰(DELI_PRODUCT_VIEW) + 직거래상품 뷰(DIRE_PRODUCT_VIEW)
-- AD_PD_LIST + AD_PD_LIST2 ▼▼▼

--  ▣ AD_PD_LIST_REALVIEW !!!!
-- 상품명, 카테고리, 등록일자, 판매자ID, 제목, 거래방식, 상태
CREATE OR REPLACE VIEW DELI_PRODUCT_VIEW
AS
SELECT DP.DELI_PD_ID AS PD_ID, PD_NAME AS PD_NAME, PC.CATEGORY_NAME AS CATE_NAME
     , DP.PD_REGIT_DATE AS REGIT_DATE, UI.U_EMAIL AS U_EMAIL, PD_TITLE AS PD_TITLE
     , DCS.SELL_COMP_DATE AS SCD, DCB.BUY_COMP_DATE AS BCD, DP.PD_START_PRICE AS PRICE
FROM DELIVERY_PRODUCT DP JOIN PRODUCT_MAKER PM
     ON DP.PD_MAKER_ID = PM.PD_MAKER_ID
        JOIN PRODUCT_CATEGORY PC
          ON PM.PD_CATEGORY_ID = PC.PD_CATEGORY_ID
          JOIN BID_LIST BL
            ON DP.DELI_PD_ID = BL.DELI_PD_ID
            JOIN BID_SUCCESS BS
              ON BL.BID_CODE = BS.BID_CODE
              JOIN DELI_COMPLETE_SELL DCS
                ON BS.BS_ID = DCS.BS_ID
                JOIN DELI_COMPLETE_BUY DCB
                  ON BS.BS_ID = DCB.BS_ID
                  JOIN COMFIT_USER CU
                  ON DP.U_ID = CU.U_ID
                  JOIN USER_INFORMATION UI
                    ON CU.U_ID = UI.U_ID;
--==> View DELI_PRODUCT_VIEW이(가) 생성되었습니다.

INSERT INTO USER_INFORMATION(U_EMAIL, U_NAME, U_ADDRESS, U_PASSWORD, U_TEL, U_PROFILE, U_NICKNAME, U_ID)
VALUES('kkk@naver.com', '김민성', '서울특별시 중구 을지로 5가 223-4', '1234', '010-2222-3333', 'C:\Downloads', '민성킴의활약', 'test2');                           

CREATE OR REPLACE VIEW AD_PD_LIST_VIEW                  
AS                  
SELECT CASE 
       WHEN SUBSTR(PD_ID, 1, 3) = 'del'
       THEN '택배거래'
       ELSE '직거래'
       END  AS TA_CATE
       , PD_NAME, CATE_NAME, REGIT_DATE, U_EMAIL, PD_TITLE, PRICE, 
       CASE
       WHEN SCD IS NOT NULL AND BCD IS NOT NULL
       THEN '거래완료'
       ELSE '거래중'
       END AS TA_STATUS
FROM DELI_PRODUCT_VIEW;
--==>> View AD_PD_LIST_VIEW이(가) 생성되었습니다.

SELECT *
FROM AD_PD_LIST_VIEW;

CREATE OR REPLACE VIEW DIRE_PRODUCT_VIEW
AS
SELECT DP.DIRE_PD_ID AS PD_ID, PD_NAME AS PD_NAME, PC.CATEGORY_NAME AS CATE_NAME
     , DP.PD_REGIT_DATE AS REGIT_DATE, UI.U_EMAIL AS U_EMAIL, PD_TITLE AS PD_TITLE
     , DCS.SELL_COMP_DATE AS SCD, DCB.BUY_COMP_DATE AS BCD, DP.PD_HOPEPRICE AS PRICE
FROM DIRECT_PRODUCT DP JOIN PRODUCT_MAKER PM
     ON DP.PD_MAKER_ID = PM.PD_MAKER_ID
        JOIN PRODUCT_CATEGORY PC
          ON PM.PD_CATEGORY_ID = PC.PD_CATEGORY_ID
          JOIN SUGGEST_LIST SL
            ON DP.DIRE_PD_ID = SL.DIRE_PD_ID
            JOIN SELECTED ST
              ON SL.SUGGEST_CODE = ST.SUGGEST_CODE
              JOIN DIRE_COMPLETE_SELL DCS
                ON ST.SELECTED_ID = DCS.SELECTED_ID
                JOIN DIRE_COMPLETE_BUY DCB
                  ON ST.SELECTED_ID = DCB.SELECTED_ID
                  JOIN COMFIT_USER CU
                  ON DP.U_ID = CU.U_ID
                  JOIN USER_INFORMATION UI
                    ON CU.U_ID = UI.U_ID;
--==>> View DIRE_PRODUCT_VIEW이(가) 생성되었습니다.


CREATE OR REPLACE VIEW AD_PD_LIST2_VIEW
AS
SELECT CASE 
       WHEN SUBSTR(PD_ID, 1, 3) = 'del'
       THEN '택배거래'
       ELSE '직거래'
       END  AS TA_CATE
       , PD_NAME, CATE_NAME, REGIT_DATE, U_EMAIL, PD_TITLE, PRICE, 
       CASE
       WHEN SCD IS NOT NULL AND BCD IS NOT NULL
       THEN '거래완료'
       ELSE '거래중'
       END AS TA_STATUS
FROM DIRE_PRODUCT_VIEW;


-- VIEW 2개를 연결후 조회

--  ▣ AD_PD_LIST_REALVIEW !!!!

CREATE OR REPLACE VIEW AD_PD_LIST_REALVIEW
AS
SELECT *
FROM AD_PD_LIST_VIEW
UNION ALL
SELECT *
FROM AD_PD_LIST2_VIEW;
-- View AD_PD_LIST_REALVIEW이(가) 생성되었습니다.

-- 조회 구문(날짜순)
SELECT TA_CATE, PD_NAME, CATE_NAME, REGIT_DATE, U_EMAIL, PD_TITLE, TA_STATUS
FROM AD_PD_LIST_REALVIEW
ORDER BY REGIT_DATE;
/*
직거래	GeForce RTX 3060 Ti	그래픽카드	2022-06-10 16:28;07	issac1162@test.com	NVIDIA 그래픽카드 개급처	거래완료
택배거래	intel I-7 8700	CPU	2022-06-10 16:36;50	kkk@naver.com	i-7 8700 저렴하게 판매	거래완료
*/
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI;SS';
--==>> Session이(가) 변경되었습니다.

SELECT PD_NAME, PRICE 
FROM AD_PD_LIST_REALVIEW;
/*
intel I-7 8700	150000
GeForce RTX 3060 Ti	1000000
*/

COMMIT; 
--------------------
-- 2. 상품 관리
--    입금 + 출금 내역 확인
--    입출금분류(IO_TYPE)  이메일(U_EMAIL)   이름(U_NAME)  시간(IO_DATE)  
--    입출금은행(BANK_NAME) 계좌번호(ACCOUNT) 금액

-- ○ 입금내역 조회
SELECT IM.IN_M_ID AS IO_TYPE, UI.U_EMAIL AS U_EMAIL, UI.U_NAME AS U_NAME
     , IM.IN_DATE AS IO_DATE, B.BANK_NAME AS BANK_NAME, IM.IN_ACCOUNT AS ACCOUNT
     , IM.IN_MONEY AS MONEY
FROM INPUT_MONEY IM JOIN BANK B
     ON IM.BANK_ID = B.BANK_ID
        JOIN COMFIT_USER CU
          ON IM.U_ID = CU.U_ID
             JOIN USER_INFORMATION UI
               ON CU.U_ID = UI.U_ID;
               
-- ○ 출금내역 조회
SELECT OM.OUT_M_ID AS IO_TYPE, UI.U_EMAIL AS U_EMAIL, UI.U_NAME AS U_NAME
     , OM.OUT_DATE AS IO_DATE, B.BANK_NAME AS BANK_NAME, OM.OUT_ACCOUNT AS ACCOUNT
     , OM.OUT_MONEY AS MONEY
FROM OUTPUT_MONEY OM JOIN BANK B
     ON OM.BANK_ID = B.BANK_ID
        JOIN COMFIT_USER CU
          ON OM.U_ID = CU.U_ID
             JOIN USER_INFORMATION UI
               ON CU.U_ID = UI.U_ID;
               
--    입출금분류(IO_TYPE)  이메일(U_EMAIL)   이름(U_NAME)  시간(IO_DATE)  
--    입출금은행(BANK_NAME) 계좌번호(ACCOUNT) 금액
CREATE OR REPLACE VIEW AD_IO_MONEY_LIST_REALVIEW
AS
SELECT CASE
       WHEN SUBSTR(M.IO_TYPE, 1, 1) = 'i'
       THEN '입금'
       ELSE '출금'
       END AS IO_TYPE, M.U_EMAIL AS U_EMAIL, M.U_NAME AS U_NAME, M.IO_DATE AS IO_DATE
       , M.BANK_NAME AS BANK_NAME, M.ACCOUNT AS ACCOUNT, M.MONEY AS MONEY
FROM
(
SELECT IM.IN_M_ID AS IO_TYPE, UI.U_EMAIL AS U_EMAIL, UI.U_NAME AS U_NAME
     , IM.IN_DATE AS IO_DATE, B.BANK_NAME AS BANK_NAME, IM.IN_ACCOUNT AS ACCOUNT
     , IM.IN_MONEY AS MONEY
FROM INPUT_MONEY IM JOIN BANK B
     ON IM.BANK_ID = B.BANK_ID
        JOIN COMFIT_USER CU
          ON IM.U_ID = CU.U_ID
             JOIN USER_INFORMATION UI
               ON CU.U_ID = UI.U_ID
UNION ALL
SELECT OM.OUT_M_ID AS IO_TYPE, UI.U_EMAIL AS U_EMAIL, UI.U_NAME AS U_NAME
     , OM.OUT_DATE AS IO_DATE, B.BANK_NAME AS BANK_NAME, OM.OUT_ACCOUNT AS ACCOUNT
     , OM.OUT_MONEY AS MONEY
FROM OUTPUT_MONEY OM JOIN BANK B
     ON OM.BANK_ID = B.BANK_ID
        JOIN COMFIT_USER CU
          ON OM.U_ID = CU.U_ID
             JOIN USER_INFORMATION UI
               ON CU.U_ID = UI.U_ID
) M;               
--==>> View AD_IO_MONEY_LIST_REALVIEW이(가) 생성되었습니다.

-- 조회 구문
SELECT IO_TYPE, U_EMAIL, U_NAME, IO_DATE, BANK_NAME
     , ACCOUNT, MONEY
FROM AD_IO_MONEY_LIST_REALVIEW
ORDER BY IO_DATE;
/*
출금	issac1162@test.com	오이삭	2022-06-10 17:42;19	KB국민은행	941602-00-228699	500000
입금	issac1162@test.com	오이삭	2022-06-10 17:44;52	KB국민은행	941602-00-228699	500000               
*/
    
--------------------------------------------------------------------------------
-- * 카테고리 관리
SELECT PD_CATEGORY_ID, CATEGORY_NAME
FROM PRODUCT_CATEGORY;
/*
CPU
그래픽카드
메모리
메인보드
SSD
HDD
외장HDD/SSD
케이스
파워
키보드
마우스
모니터
오디오
프린터
공유기/무선랜
노트북
*/

--------------------------------------------------------------------------------
-- * 고객센터 관리
-- 1. 신고 관리
-- 출력 데이터 : 상품코드, 신고자 이름, 피신고자 이름, 신고사유
--             , 관리자조치여부, 접수시간, 처리시간


SELECT *
FROM TAB
WHERE TABTYPE = 'VIEW';

--------------------------------------------------------------------------------

SELECT IO_TYPE, U_EMAIL, U_NAME, IO_DATE, BANK_NAME
     , ACCOUNT, MONEY
FROM AD_IO_MONEY_LIST_REALVIEW
WHERE IO_TYPE = '입금'
ORDER BY IO_DATE;

SELECT *
FROM DELIVERY_PRODUCT;


--------------------------------------------------------------------------------
-- 관리자모드 상품관리 상세보기

-- 테스트 
SELECT CASE
       WHEN SUBSTR(DP.DELI_PD_ID, 1, 4) = 'deli'
       THEN '택배거래'
       ELSE '직거래'
       END AS DELI_PD_ID, DP.PD_REGIT_DATE 게시일자, DP.PD_TITLE 제목, DP.U_ID 판매자ID
, PC.CATEGORY_NAME 카테고리이름, DP.PD_NAME 물품명, DP.PD_MAKER_ID 제조사
, BL.U_ID 구매자ID, BL.BID_PRICE 가격, BL.BID_DATE 구매일시, CONCAT(BL.ADDRESS, BL.ADDR_DETAIL) 배송장소
, DCB.BUY_COMP_DATE 구매확정일자, DCS.SELL_COMP_DATE 판매확정일시, DCS.PD_DELI_NUM 운송장
, BL.U_ID 제안자ID, BL.BID_DATE 제안시간, BL.BID_PRICE 제안가격
FROM DELIVERY_PRODUCT DP JOIN PRODUCT_MAKER PM
ON DP.PD_MAKER_ID = PM.PD_MAKER_ID
JOIN PRODUCT_CATEGORY PC
ON PM.PD_CATEGORY_ID = PC.PD_CATEGORY_ID
JOIN BID_LIST BL
ON DP.DELI_PD_ID = BL.DELI_PD_ID
JOIN BID_SUCCESS BS
ON BL.BID_CODE = BS.BID_CODE
JOIN DELI_COMPLETE_SELL DCS
ON DCS.BS_ID = BS.BS_ID
JOIN DELI_COMPLETE_BUY DCB
ON DCB.BS_ID = BS.BS_ID
WHERE DP.DELI_PD_ID = 'deli_1';
--게시글 번호로 들어가는게 맞지 않나? 판매자 아이디는 동시에 글 몇개 쓸 수 있으니까... 게시글 번호 DELI_PD_ID??


select case
       when substr(dp.deli_pd_id, 1, 4) = 'deli'
       then '택배거래'
       else '직거래'
       end as deli_pd_id, dp.pd_regit_date as pd_regit_date, dp.pd_title as pd_title, dp.u_id as u_id
, pc.category_name as category_name, dp.pd_name as pd_name, dp.pd_maker_id as pd_maker_id
, bl.u_id as b_u_id, bl.bid_price as bid_price, bl.bid_date as bid_date, concat(bl.address, bl.addr_detail) as address
, dcb.buy_comp_date as buy_comp_date, dcs.sell_comp_date as sell_comp_date, dcs.pd_deli_num as pd_deli_num


--------------------------------------------------------------------------------