
-- 포인트 뷰 수정
SELECT *
FROM USER_POINT_VIEW;

CREATE OR REPLACE VIEW USER_POINT_VIEW
AS
SELECT INPUT.U_ID, (IN_MONEY_TOT - NVL(OUT_MONEY_TOT,0)) AS POINT
FROM USER_INMONEY_VIEW INPUT
LEFT OUTER JOIN USER_OUTMONEY_VIEW OUTPUT
ON INPUT.U_ID = OUTPUT.U_ID;

SELECT *
FROM USER_POINT_VIEW;

CREATE OR REPLACE VIEW USER_INMONEY_VIEW
AS
SELECT U_ID, SUM(IN_MONEY) AS IN_MONEY_TOT
FROM
(
SELECT BUYER_ID AS U_ID, BISG_PRICE AS IN_MONEY
FROM BS_FAIL_VIEW
UNION
SELECT U_ID, SUM(IN_MONEY)
FROM INPUT_MONEY
GROUP BY U_ID
UNION
SELECT U_ID, IN_MONEY
FROM DELI_INMONEY_VIEW
UNION
SELECT U_ID, IN_MONEY
FROM DIRE_INMONEY_VIEW
)
GROUP BY U_ID;

SELECT *
FROM INPUT_MONEY;

COMMIT;




SELECT *
FROM DELIVERY_PRODUCT;

SELECT *
FROM BID_LIST;

-- 입찰글 추가(낙찰X 확인용)
INSERT INTO BID_LIST(BID_CODE, BID_DATE, BID_PRICE
, ADDRESS, ADDR_DETAIL, U_ID, DELI_PD_ID)
VALUES('bid_2', TO_DATE('2022-06-10','YYYY-MM-DD'), 140000
, '인천광역시 중구 신포동', '신흥초등학교', 'test3', 'deli_1');

UPDATE BID_LIST
SET BID_PRICE = 152000
WHERE BID_CODE = 'bid_2';

COMMIT;

-- 낙찰여부까지 보여주는 VIEW
CREATE OR REPLACE VIEW BID_SUCCESSCOUNT_VIEW
AS
SELECT BID_CODE, BID_DATE, BID_PRICE, ADDRESS, ADDR_DETAIL, U_ID, DELI_PD_ID ,
(
    SELECT COUNT(*) AS COUNT
    FROM
    (SELECT BS_ID, BS_DATE, BID_CODE AS BI_CODE, ALARM_CODE
     FROM BID_SUCCESS
    ) A
    WHERE BID_CODE = BI_CODE
) AS SUCCESSCOUNT
FROM BID_LIST;
--==>> View BID_SUCCESSCOUNT_VIEW이(가) 생성되었습니다.

-- VIEW 확인
SELECT *
FROM BID_SUCCESSCOUNT_VIEW;

-- 낙찰되지 않은 입찰 VIEW
--> 채택테이블에 해당데이터가 없으면서 글이 올라오고 3일이 지난 데이터(+4)(AND)
--> 또는, 최고금액이 아닌 데이터(OR)
SELECT BID_CODE AS BISG_CODE, BSV.DELI_PD_ID AS PD_ID, PD_TITLE
, PD_START_PRICE AS PD_PRICE, BID_PRICE AS BISG_PRICE
, PD_REGIT_DATE, BID_DATE AS BISG_DATE
, BSV.U_ID AS BUYER_ID , DP.U_ID AS SELLER_ID
FROM BID_SUCCESSCOUNT_VIEW BSV
JOIN DELIVERY_PRODUCT DP
ON BSV.DELI_PD_ID = DP.DELI_PD_ID
WHERE (PD_REGIT_DATE +4 > SYSDATE AND SUCCESSCOUNT = 0)
OR NOT BID_PRICE = (SELECT MAX(BID_PRICE)
                     FROM BID_LIST
                     WHERE DELI_PD_ID = BSV.DELI_PD_ID
                     GROUP BY DELI_PD_ID);
    

-- 채택여부까지 보여주는 VIEW
CREATE OR REPLACE VIEW SUGGEST_SELECTEDCOUNT_VIEW
AS
SELECT SUGGEST_CODE, SUGGEST_PRICE, SUGGEST_TIME, SUGGEST_DATE, SUGGEST_PLACE
, PLACE_DETAIL, U_ID, DIRE_PD_ID, ALARM_CODE,
(
    SELECT COUNT(*) AS COUNT
    FROM
    (SELECT SELECTED_ID, SELECTED_DATE, BUYER_CODE, SELLER_CODE, SUGGEST_CODE AS SG_CODE, ALARM_CODE
     FROM SELECTED
    ) A
    WHERE SG_CODE = SUGGEST_CODE
) AS SELECTEDCOUNT
FROM SUGGEST_LIST;
--==>> View SUGGEST_SELECTEDCOUNT_VIEW이(가) 생성되었습니다.

-- 채택되지 않은 제안 VIEW
--> 채택테이블에 해당데이터가 없으면서, 거래 희망 종료 날짜가 하루 지난 데이터(+1)
SELECT SUGGEST_CODE, SUGGEST_TIME, SUGGEST_PLACE, PLACE_DETAIL
, DP.DIRE_PD_ID, SELECTEDCOUNT, PD_TITLE
, PD_HOPE_STIME, PD_HOPE_ETIME, PD_HOPE_PLACE, PD_HOPE_MGRS, PD_REGIT_DATE
, SUGGEST_DATE, PD_HOPE_SDATE, PD_HOPE_EDATE
, SUGGEST_PRICE , PD_HOPEPRICE
, SSV.U_ID AS BUYER_ID, DP.U_ID AS SELLER_ID
FROM SUGGEST_SELECTEDCOUNT_VIEW SSV
JOIN DIRECT_PRODUCT DP
ON SSV.DIRE_PD_ID = SSV.DIRE_PD_ID
WHERE PD_HOPE_EDATE +1 > SYSDATE
AND SELECTEDCOUNT = 0;





-- 제안과 입찰 거절 모음 VIEW
CREATE OR REPLACE VIEW BS_FAIL_VIEW
AS
SELECT BID_CODE AS BISG_CODE, BSV.DELI_PD_ID AS PD_ID, PD_TITLE
, PD_START_PRICE AS PD_PRICE, BID_PRICE AS BISG_PRICE
, PD_REGIT_DATE, BID_DATE AS BISG_DATE
, BSV.U_ID AS BUYER_ID , DP.U_ID AS SELLER_ID
FROM BID_SUCCESSCOUNT_VIEW BSV
JOIN DELIVERY_PRODUCT DP
ON BSV.DELI_PD_ID = DP.DELI_PD_ID
WHERE (PD_REGIT_DATE +4 < SYSDATE AND SUCCESSCOUNT = 0)
OR NOT BID_PRICE = (SELECT MAX(BID_PRICE)
                     FROM BID_LIST
                     WHERE DELI_PD_ID = BSV.DELI_PD_ID
                     GROUP BY DELI_PD_ID)
UNION
SELECT SUGGEST_CODE AS BISG_CODE, DP.DIRE_PD_ID AS PD_ID, PD_TITLE
, PD_HOPEPRICE AS PD_PRICE, SUGGEST_PRICE AS BISG_PRICE
, PD_REGIT_DATE, SUGGEST_DATE AS BISG_DATE
, SSV.U_ID AS BUYER_ID, DP.U_ID AS SELLER_ID
FROM SUGGEST_SELECTEDCOUNT_VIEW SSV
JOIN DIRECT_PRODUCT DP
ON SSV.DIRE_PD_ID = SSV.DIRE_PD_ID
WHERE PD_HOPE_EDATE +1 < SYSDATE
AND SELECTEDCOUNT = 0;

SELECT *
FROM BS_FAIL_VIEW;

-- 택배거래 판매 완료(판매확정과 구매확정이 모두 완료된 상태)
CREATE OR REPLACE VIEW DELI_COMPLETE_VIEW
AS
SELECT *
FROM
(
SELECT BS_ID, BS_DATE, BID_CODE
, (SELECT COUNT(*)
    FROM 
    (SELECT DELI_COMP_SELL_ID AS COMP_ID ,  REVIEW, SELL_COMP_DATE AS COMP_DATE, BS_ID
    FROM DELI_COMPLETE_SELL
    UNION
    SELECT DELI_COMP_BUY_ID AS COMP_ID, REVIEW, BUY_COMP_DATE AS COMP_DATE, BS_ID
    FROM DELI_COMPLETE_BUY)
    WHERE BS_ID = BS.BS_ID
) AS COMPLETECOUNT
FROM BID_SUCCESS BS
)
WHERE COMPLETECOUNT = 2;
--==>> View DELI_COMPLETE_VIEW이(가) 생성되었습니다.

SELECT *
FROM DELI_COMPLETE_VIEW;

-- 직거래 판매 완료
CREATE OR REPLACE VIEW DIRE_COMPLETE_VIEW
AS
SELECT *
FROM
(
SELECT SELECTED_ID, SELECTED_DATE, BUYER_CODE, SELLER_CODE, SUGGEST_CODE
, (SELECT COUNT(*)
    FROM 
    (SELECT DIRE_COMP_SELL_ID AS COMP_ID, REVIEW, SELL_COMP_DATE AS COMP_DATE, SELECTED_ID
    FROM DIRE_COMPLETE_SELL
    UNION
    SELECT DIRE_COMP_BUY_ID AS COMP_ID, REVIEW, BUY_COMP_DATE AS COMP_DATE, SELECTED_ID
    FROM DIRE_COMPLETE_BUY)
    WHERE SELECTED_ID = S.SELECTED_ID
) AS COMPLETECOUNT
FROM SELECTED S
)
WHERE COMPLETECOUNT = 2;
--==>> View DIRE_COMPLETE_VIEW이(가) 생성되었습니다.


--==>> 거래가 둘다 확정된 테이블 VIEW(아직 완성 X)
CREATE OR REPLACE VIEW TRADE_COMPLETE_VIEW
AS
SELECT SELECTED_ID AS COMP_ID, SELECTED_DATE AS COMP_DATE, SUGGEST_CODE AS COMP_CODE, COMPLETECOUNT
FROM DIRE_COMPLETE_VIEW
UNION
SELECT BS_ID AS COMP_ID, BS_DATE AS COMP_DATE, BID_CODE AS COMP_CODE, COMPLETECOUNT
FROM DELI_COMPLETE_VIEW;

--==>> 거래가 끝난 직거래 가격 출력 테이블
CREATE OR REPLACE VIEW DIRE_INMONEY_VIEW
AS
SELECT DP.U_ID AS U_ID, SUGGEST_PRICE AS IN_MONEY
FROM DIRE_COMPLETE_VIEW DCV
JOIN SUGGEST_LIST SL
ON DCV.SUGGEST_CODE = SL.SUGGEST_CODE
JOIN DIRECT_PRODUCT DP
ON SL.DIRE_PD_ID = DP.DIRE_PD_ID;

SELECT *
FROM DIRE_INMONEY_VIEW;

--==>> 거래가 끝난 택배거래 가격 출력 테이블
CREATE OR REPLACE VIEW DELI_INMONEY_VIEW
AS
SELECT DP.U_ID AS U_ID, BID_PRICE AS IN_MONEY
FROM DELI_COMPLETE_VIEW DCV
JOIN BID_LIST BL
ON DCV.BID_CODE = BL.BID_CODE
JOIN DELIVERY_PRODUCT DP
ON BL.DELI_PD_ID = DP.DELI_PD_ID;

SELECT *
FROM DELI_INMONEY_VIEW;


--==>> 포인트에 더해야하는 테이블 (UNION으로 다 묶은 뒤 포인트로 전환)
CREATE OR REPLACE VIEW USER_INMONEY_VIEW
AS
SELECT U_ID, SUM(IN_MONEY) AS IN_MONEY_TOT
FROM
(
SELECT BUYER_ID AS U_ID, BISG_PRICE AS IN_MONEY
FROM BS_FAIL_VIEW
UNION
SELECT U_ID, IN_MONEY
FROM INPUT_MONEY
UNION
SELECT U_ID, IN_MONEY
FROM DELI_INMONEY_VIEW
UNION
SELECT U_ID, IN_MONEY
FROM DIRE_INMONEY_VIEW
)
GROUP BY U_ID;


--==>> 포인트에서 빼야하는 테이블
CREATE OR REPLACE VIEW USER_OUTMONEY_VIEW
AS
SELECT U_ID, SUM(OUT_MONEY) AS OUT_MONEY_TOT
FROM
(
SELECT U_ID, BID_PRICE AS OUT_MONEY
FROM BID_LIST
UNION
SELECT U_ID, SUGGEST_PRICE AS OUT_MONEY
FROM SUGGEST_LIST
UNION
SELECT U_ID, OUT_MONEY
FROM OUTPUT_MONEY
)
GROUP BY U_ID;
-- 출금

CREATE OR REPLACE VIEW USER_POINT_VIEW
AS
SELECT INPUT.U_ID, (IN_MONEY_TOT - OUT_MONEY_TOT) AS POINT
FROM USER_INMONEY_VIEW INPUT
JOIN USER_OUTMONEY_VIEW OUTPUT
ON INPUT.U_ID = OUTPUT.U_ID;

SELECT *
FROM USER_POINT_VIEW;

-- 테스트 입금
INSERT INTO INPUT_MONEY(IN_M_ID, IN_MONEY, IN_ACCOUNT, U_ID, BANK_ID)
VALUES('inm_2', 650000, '123456-78-999999', 'test3', 2);
--> 0원에서 650000원 확인 완료


-- 테스트 출금
INSERT INTO OUTPUT_MONEY(OUT_M_ID, OUT_MONEY, OUT_ACCOUNT, U_ID, BANK_ID)
VALUES('outm_2', 300000, '1234567-78-999999', 'test3', 2);
--> 650000원에서 350000 확인 완료


ROLLBACK;
--> ROLLBACK으로 다시 0원으로

INSERT INTO BID_LIST(BID_CODE, BID_PRICE, ADDRESS, ADDR_DETAIL, U_ID, DELI_PD_ID)
VALUES('bid_3', 300000, '인천 어딘가', '깊은 곳', 'test3', 'deli_1');

--==>>
/*
test1	795000
test2	-795000
test3	0
*/

SELECT *
FROM USER_POINT_VIEW;
-- test3가 같은 제품을 더 높은 가격으로 입찰했을 때
-- test1의 포인트는 돌아오고, test3의 포인트는 빠져나감
/*
test1	950000
test2	-795000
test3	-300000
*/

-- 택배거래 상품등록 과정 POINTTEST
SELECT *
FROM DELIVERY_PRODUCT;

SELECT *
FROM PRODUCT_MAKER;

SELECT *
FROM PRODUCT_CATEGORY;

select *
from product_as;

select *
from comfit_user;

-- 택배거래 상품 등록
INSERT INTO DELIVERY_PRODUCT(DELI_PD_ID, PD_TITLE, PD_NAME, PD_PHOTO, PD_AS_REMAIN
, PD_START_PRICE, PD_MAKER_ID, PD_AS_ID, U_ID, COMMENTS, IMD_PRICE)
VALUES('deli_2', '레이저 마우스 급처', '레이저 바이퍼', 'C:\Downloads', '3개월'
, 20000, 'maker_122', 3, 'test3', '급처해요', 50000);

-- 포인트 확인
SELECT *
FROM USER_POINT_VIEW;
--==>> 변화 없음

SELECT *
FROM BID_LIST;

-- 입찰등록
INSERT INTO BID_LIST(BID_CODE, BID_PRICE, ADDRESS, ADDR_DETAIL, U_ID, DELI_PD_ID)
VALUES('bid_3', 25000, '강원도 원주시 월송석화로 288', '나동 1층', 'test2', 'deli_2');

-- 포인트 확인
SELECT *
FROM USER_POINT_VIEW;
--==>>
/*
test1	795000
test2	-820000
test3	0
*/
-- test2번 25000원 빠져나간 것 확인 아직 test3번 돈 안들어옴(거래가 확정되지 않음)

SELECT *
FROM BID_SUCCESS;

INSERT INTO BID_SUCCESS(BS_ID, BID_CODE)
VALUES('bs_2', 'bid_3');

-- 포인트 확인
SELECT *
FROM USER_POINT_VIEW;
--==>> 변화 없음

SELECT *
FROM DELI_COMPLETE_SELL;

INSERT INTO DELI_COMPLETE_SELL(DELI_COMP_SELL_ID, PD_DELI_NUM, BS_ID)
VALUES('dcsell_2', '12345678911', 'bs_2');

-- 포인트
SELECT *
FROM USER_POINT_VIEW;
--==>> 변화 없음

SELECT *
FROM DELI_COMPLETE_BUY;

INSERT INTO DELI_COMPLETE_BUY(DELI_COMP_BUY_ID, BS_ID)
VALUES('dsbuy_2', 'bs_2');

-- 포인트 확인
SELECT *
FROM USER_POINT_VIEW;
--==>>  test3번에 25000p 들어온 것 확인완료.
/*
test1	795000
test2	-820000
test3	25000
*/


ROLLBACK;
--==>> 롤백 완료.

SELECT *
FROM USER_POINT_VIEW;
--==>> 포인트 원상복구
/*
test1	795000
test2	-795000
test3	0
*/

--==>> 모든 유저 포인트 출력
CREATE OR REPLACE VIEW ALL_USER_POINT_VIEW
AS
SELECT U_ID, SUM(POINT) AS POINT
FROM
(
SELECT U_ID, POINT
FROM USER_POINT_VIEW
UNION
SELECT U_ID, 0 AS POINT
FROM COMFIT_USER
)
GROUP BY U_ID
ORDER BY U_ID;


SELECT *
FROM ALL_USER_POINT_VIEW;



